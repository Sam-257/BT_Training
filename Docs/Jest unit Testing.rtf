{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ButtonTest.tsx\
------\
import React,\{useState\} from 'react'\
\
export default function ButtonTest() \{\
\
   const [counter , setCounter] = useState<number>(0)\
   \
   const incrementCounter = ()=>\{\
     setCounter(prevCount=> prevCount+1)\
   \}\
  return (\
    <div>\
        <button data-testid="increment" onClick=\{incrementCounter\}>Increment</button>\
\
        <p data-testid="counter">\{counter\}</p> \
    </div>\
  )\
\}\
__test__/buttontest.test.tsx\
------\
import React from 'react';\
import \{ render, screen, fireEvent \} from '@testing-library/react';\
import ButtonTest from '../Components/TestDemo/ButtonTest';\
\
test('increment counter', () => \{\
   \
   //render the component\
   render(<ButtonTest/>)\
\
   //select the elements \
    const counter =  screen.getByTestId('counter')\
    const incrementBtn = screen.getByTestId('increment')\
\
   //interact with those element\
   fireEvent.click(incrementBtn)\
\
  //assert he expected result\
   \
   expect(counter).toHaveTextContent("2")\
\});\
\
\
\
npm run test \
or\
num run test buttontest.test.tsx\
----------------------------------------------\
\
Another test\
\
Todo.tsx\
import React,\{useEffect, useState\} from 'react'\
import axios from 'axios';\
\
type IData = \{\
    userId: number,\
    id: number\
    title: string\
    completed:boolean\
   \
\}\
\
export default function Todos() \{\
  const [todoList, setTodoList] = useState<IData[]>()  \
\
  useEffect(()=>\{\
   axios.get('https://jsonplaceholder.typicode.com/todos')\
        .then(response=>  setTodoList(response.data))\
        .catch(error=> console.log(error))\
    \
  \},[])\
\
\
  return (\
    <div>\
         \{\
            todoList?(\
                 <ul>\
                     \{todoList.map((todo:IData, index:number)=>\
\
                         <li key=\{index\} data-testid="todo1" >\{todo.title\}</li>\
                     )\}\
                 </ul>\
            ):(\
             <p>Loading...</p>\
            )\
         \}\
    </div>\
  )\
\}\
\
__test__/todo.test.tsx\
----\
import React from 'react';\
import \{ render, screen, fireEvent, waitFor \} from '@testing-library/react';\
import axios from 'axios';\
import Todos from '../Components/TestDemo/Todos';\
jest.mock("axios");\
\
const dummyTodos = [\
\{\
userId: 1,\
id: 1,\
title: "todo 1",\
completed: false,\
\},\
\{\
userId: 1,\
id: 2,\
title: "todo 2",\
completed: false,\
\},\
\{\
userId: 1,\
id: 3,\
title: "todo 3",\
completed: false,\
\},\
];\
// test('title must be rendered', async()=>\{\
\
//       render(<Todos/>)\
//       const todoList = await screen.findByText('delectus aut autem')\
      \
//       expect(todoList).toBeInTheDocument()\
       \
// \})\
test("todos list", async () => \{\
   (axios.get as jest.Mock).mockResolvedValue(\{ data: dummyTodos \})\
    render(<Todos />);\
    \
    const todoList = await waitFor(() => screen.findAllByTestId("todo1"));\
    \
    expect(todoList).toHaveLength(3);\
\});\
\
\
npm run }